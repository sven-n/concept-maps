@page "/generate"
@using ConceptMaps.UI.Components
@using ConceptMaps.UI.Data
@using Blazor.Diagrams.Core
@using Blazor.Diagrams.Components;
@using ConceptMaps.Crawler
@using ConceptMaps.UI.Services;
@using ConceptMaps.UI.Spacy

@inject RemoteTripleService RemoteTripleService
@inject DiagramService DiagramService

<PageTitle>Concept Map Generator</PageTitle>

<div class="container">
    <div class="row">
        <div class="col-5">
            <div class="alert alert-light shadow ">
                <div class="mb-3">
                    <label for="textInput">Input:</label>
                    <InputTextArea class="form-control" id="textInput" @bind-Value="@this.TextInput"></InputTextArea>
                </div>
                <div class="mb-3">
                    <p>
                        @if (this._isRunning)
                        {
                            <button class="btn btn-primary" @onclick="this.OnRunAsync" disabled>
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                <span class="sr-only">Running ..</span>
                            </button>
                        }
                        else
                        {
                            <button class="btn btn-primary" @onclick="this.OnRunAsync"><span class="oi oi-media-play"></span> Run</button>
                        }
                    </p>
                </div>

                @if (this.ErrorMessage is not null)
                {
                    <div class="alert alert-warning" role="alert">
                        @this.ErrorMessage
                    </div>
                }
            </div>

            @if (this.Relationships is not null)
            {
                <div class="alert alert-light shadow">
                    
                    <RelationsTable IsReadOnly="false" Relationships="@this.Relationships"/>
                    <button class="btn btn-primary" @onclick="this.OnApplyAsync"><span class="oi oi-media-play"></span> Apply changes</button>
                </div>
            }
        </div>
    @if (this._diagram is not null)
    {
        <div class="col-7 shadow p-3 mb-5 rounded">
            <div class="btn-group btn-group-sm" role="group" aria-label="Diagram functions">
                <div class="btn btn-outline-primary btn-sm">
                    <label for="entityFilter">Filter:</label>
                    <InputSelect class="btn-outline-primary" id="entityFilter" @bind-Value="this.SelectedEntity">
                        <option value="">(None)</option>
                        @foreach (var entity in this.Entities)
                        {
                            <option value="@entity">@entity</option>
                        }
                    </InputSelect>
                </div>
                    <button class="btn btn-outline-primary btn-sm" title="Zoom to fit" onclick="@(() => this._diagram.ZoomToFit())"><span class="oi oi-resize-both"></span></button>
            </div>
            <div class="canvas-host-a5">
                <CascadingValue Value="this._diagram">
                    <DiagramCanvas></DiagramCanvas>
                </CascadingValue>
            </div>
        </div>
    }
    </div>
</div>


@code {
    private Diagram? _diagram;
    private bool _isRunning;
    private string _selectedEntity = string.Empty;

    private string? TextInput { get; set; } = "As siblings, Bob and Alice share a special bond as the children of Jeff and Mary.";
    private string? TriplesOutput { get; set; }

    [Inject]
    private IJSRuntime JsRuntime { get; set; } = null!;

    private List<Relationship>? Relationships { get; set; }

    private IEnumerable<Triple> FilteredTriples
    {
        get
        {
            if (this.Relationships is null)
            {
                return Enumerable.Empty<Triple>();
            }

            if (string.IsNullOrWhiteSpace(this.SelectedEntity))
            {
                return this.Relationships.ToTriples();
            }

            var filteredRelationships = this.Relationships.Where(rel => rel.FirstEntity == this.SelectedEntity || rel.SecondEntity == this.SelectedEntity).ToList();
            var entities = filteredRelationships.Select(rel => rel.FirstEntity).Concat(filteredRelationships.Select(rel => rel.SecondEntity)).Distinct().ToList();
            var additionalLinks = this.Relationships
                .Where(rel => entities.Contains(rel.FirstEntity) 
                              && entities.Contains(rel.SecondEntity)
                              && !filteredRelationships.Contains(rel))
                .ToList();
            filteredRelationships.AddRange(additionalLinks);
            return filteredRelationships.ToTriples();
        }
    }

    private List<string> Entities { get; set; } = new();

    private string SelectedEntity
    {
        get => _selectedEntity;
        set
        {
            if (value == this._selectedEntity)
            {
                return;
            }

            this._selectedEntity = value;

            var filtered = this.FilteredTriples.ToList();
            this.InvokeAsync(() => this.CreateDiagramAsync(filtered));
        }
    }

    private RenderFragment? ErrorMessage { get; set; }

    private async Task OnApplyAsync()
    {
        this._diagram = null;
        await this.InvokeAsync(this.StateHasChanged);
        await Task.Delay(100);
        await this.CreateDiagramAsync(this.FilteredTriples.ToList());
    }

    private async Task OnRunAsync()
    {
        this._diagram = null;
        this.TriplesOutput = null;
        this.ErrorMessage = null;

        this._isRunning = true;
        try
        {
            this.StateHasChanged();
            IList<Triple> triples;
            try
            {
                triples = await this.RemoteTripleService.GenerateTriplesAsync(this.TextInput);
                triples = triples.Where(t => t.EdgeName != SpacyRelationLabel.Undefined).ToList();
                this.TriplesOutput = string.Join(Environment.NewLine, triples);
                this.Entities = triples.Select(t => t.FromWord).Concat(triples.Select(t => t.ToWord)).Distinct().Order().ToList();
                this.Relationships = triples
                    .Select(t => new Relationship
                    {
                        FirstEntity = t.FromWord,
                        RelationshipTypeInSentence = t.EdgeName ?? SpacyRelationLabel.Undefined,
                        SecondEntity = t.ToWord,
                    })
                    .ToList();
            }
            catch (Exception ex)
            {
                this.ErrorMessage = builder => builder.AddMarkupContent(
                    0, 
                    $"Unexpected error occurred when generating triples: {ex}".ReplaceLineEndings("<br>"));
                return;
            }

            await CreateDiagramAsync(triples);
        }
        finally
        {
            this._isRunning = false;
        }
    }

    private async Task CreateDiagramAsync(IList<Triple> triples)
    {
        try
        {
            if (this._diagram is { } oldDiagram)
            {
                this._diagram = null;
                oldDiagram.Links.Clear();
                oldDiagram.Nodes.Clear();
                await this.InvokeAsync(this.StateHasChanged);
                await Task.Delay(200);
            }
            this._diagram = this.DiagramService.CreateDiagram(triples);

            // This is required to render it once, so we can arrange the elements in the next step
            await this.InvokeAsync(this.StateHasChanged);
            await Task.Delay(200);
            await this.ArrangeNodesAsync();
        }
        catch (Exception ex)
        {
            this.ErrorMessage = builder => builder.AddMarkupContent(
                0,
                $"Unexpected error occurred when generating or arranging the diagram: {ex}".ReplaceLineEndings("<br>"));
        }
    }

    private async Task ArrangeNodesAsync()
    {
        if (this._diagram is { } diagram)
        {
            diagram.Batch(() => this.DiagramService.ArrangeNodes(diagram, "FamilyTree"));
        }

        await this.InvokeAsync(this.StateHasChanged);
    }
}
