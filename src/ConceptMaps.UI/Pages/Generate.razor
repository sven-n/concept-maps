@page "/generate"
@using ConceptMaps.UI.Components
@using ConceptMaps.UI.Data
@using Blazor.Diagrams.Core
@using Blazor.Diagrams.Components;
@using ConceptMaps.Crawler
@using ConceptMaps.UI.Services;

@inject RemoteTripleService RemoteTripleService
@inject DiagramService DiagramService

<PageTitle>Concept Map Generator</PageTitle>

<div class="container">
    <div class="row">
        <div class="col-5">
            <div class="alert alert-light shadow ">
                <div class="mb-3">
                    <label for="textInput">Input:</label>
                    <InputTextArea class="form-control" id="textInput" @bind-Value="@this.TextInput"></InputTextArea>
                </div>
                <div class="mb-3">
                    <p>
                        @if (this._isRunning)
                        {
                            <button class="btn btn-primary" @onclick="this.OnRunAsync" disabled>
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                <span class="sr-only">Running ..</span>
                            </button>
                        }
                        else
                        {
                            <button class="btn btn-primary" @onclick="this.OnRunAsync"><span class="oi oi-media-play"></span> Run</button>
                        }
                    </p>
                </div>

                @if (this.ErrorMessage is not null)
                {
                    <div class="alert alert-warning" role="alert">
                        @this.ErrorMessage
                    </div>
                }
            </div>

            @if (this.Relationships is not null)
            {
                <div class="alert alert-light shadow">
                    <RelationsTable IsReadOnly="false" Relationships="@this.Relationships"/>
                    <button class="btn btn-primary" @onclick="this.OnApplyAsync"><span class="oi oi-media-play"></span> Apply changes</button>
                </div>
            }
        </div>
        <div class="col-7">

            @if (this._diagram is not null)
            {
                <div>
                    <span>Layout algorithm:</span>
                    <InputSelect @bind-Value="@this.SelectedAlgorithm">
                        @foreach (var algorithmType in this.DiagramService.AlgorithmTypes)
                        {
                            <option id="@algorithmType" selected="@(this.SelectedAlgorithm == algorithmType ? "true" : null)">@algorithmType</option>
                        }
                    </InputSelect>
                </div>
                <div class="canvas-host-a5 shadow p-3 mb-5 rounded">
                    <CascadingValue Value="_diagram">
                        <DiagramCanvas></DiagramCanvas>
                    </CascadingValue>
                </div>
            }
        </div>
    </div>
</div>


@code {
    private Diagram? _diagram;
    private string _selectedAlgorithm = string.Empty;
    private bool _isRunning;

    private string? TextInput { get; set; } = "As siblings, Bob and Alice share a special bond as the children of Jeff and Mary.";
    private string? TriplesOutput { get; set; }
    
    private List<Relationship>? Relationships { get; set; }

    private RenderFragment? ErrorMessage { get; set; }

    public string SelectedAlgorithm
    {
        get => _selectedAlgorithm;
        set
        {
            _selectedAlgorithm = value;
            this.ArrangeNodes();
        }
    }

    private async Task OnApplyAsync()
    {
        this._diagram = null;
        await this.InvokeAsync(this.StateHasChanged);
        await Task.Delay(100);
        var triples = this.Relationships!.Select(rel => new Triple(rel.FirstEntity, rel.RelationshipTypeInSentence, rel.SecondEntity)).ToList();
        await this.CreateDiagramAsync(triples);
    }

    private async Task OnRunAsync()
    {
        this._diagram = null;
        this.TriplesOutput = null;
        this.ErrorMessage = null;

        this._isRunning = true;
        try
        {
            this.StateHasChanged();
            IList<Triple> triples;
            try
            {
                triples = await this.RemoteTripleService.GenerateTriplesAsync(this.TextInput);
                this.TriplesOutput = string.Join(Environment.NewLine, triples);
                this.Relationships = triples.Select(t => new Relationship()
                {
                    FirstEntity = t.FromWord,
                    RelationshipTypeInSentence = t.EdgeName ?? "UNDEFINED",
                    SecondEntity = t.ToWord,
                }).ToList();
            }
            catch (Exception ex)
            {
                this.ErrorMessage = builder => builder.AddMarkupContent(
                    0, 
                    $"Unexpected error occurred when generating triples: {ex}".ReplaceLineEndings("<br>"));
                return;
            }

            await CreateDiagramAsync(triples);
        }
        finally
        {
            this._isRunning = false;
        }
    }

    private async Task CreateDiagramAsync(IList<Triple> triples)
    {
        try
        {
            this._diagram = this.DiagramService.CreateDiagram(triples);

            // This is required to render it once, so we can arrange the elements in the next step
            this.StateHasChanged();
            await Task.Delay(100);

            if (string.IsNullOrWhiteSpace(this.SelectedAlgorithm))
            {
                // Implicitly arranges nodes.
                this._selectedAlgorithm = "Tree";
            }

            ArrangeNodes();
        }
        catch (Exception ex)
        {
            this.ErrorMessage = builder => builder.AddMarkupContent(
                0,
                $"Unexpected error occurred when generating or arranging the diagram: {ex}".ReplaceLineEndings("<br>"));
        }
    }

    private void ArrangeNodes()
    {
        if (this._diagram is not null
            && !string.IsNullOrWhiteSpace(this._selectedAlgorithm))
        {
            this.DiagramService.ArrangeNodes(this._diagram, this._selectedAlgorithm);
        }
    }
}
