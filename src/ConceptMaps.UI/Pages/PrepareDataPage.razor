@page "/prepare-data"

@using ConceptMaps.UI.Components

<h3>Data Preparation</h3>

<p>On this page we prepare our crawled data, so that it can be trained into the model.</p>

<div>
    <p>
        <div class="btn-group">
            <button class="btn btn-primary mx-1" onclick="@this.AddNewSentence" disabled="@(this.SentenceAnalyzer.IsAnalyzing || this.IsDialogOpen)">
                <span class="oi oi-plus"></span> Add new
            </button>
            <div class="dropdown">
                <button class="btn btn-primary dropdown-toggle mx-1" type="button"
                        data-toggle="dropdown"
                        aria-expanded="@this._showCrawledDataSelection"
                        disabled="@this._showBatchAdding"
                        @onclick="() => this._showCrawledDataSelection = !this._showCrawledDataSelection">
                    <span class="oi oi-plus"></span> Add crawled
                </button>
            </div>
            <div class="dropdown">
                <button class="btn btn-primary dropdown-toggle mx-1"
                        type="button" id="freeTextMenuButton"
                        data-toggle="dropdown"
                        aria-haspopup="true"
                        aria-expanded="@this._showBatchAdding"
                        disabled="@(this._showCrawledDataSelection || this.SentenceAnalyzer.IsAnalyzing)"
                        @onclick="() => this._showBatchAdding = !this._showBatchAdding">
                    <span class="oi oi-plus"></span> Batch
                </button>
            </div>

            <button class="btn btn-primary mx-1" onclick="@this.OnLoadContextAsync" disabled="@(this.SentenceAnalyzer.IsAnalyzing || this.IsDialogOpen)">
                <span class="oi oi-cloud-download"></span> Load Session
            </button>
            <button class="btn btn-primary mx-1" onclick="@this.OnSaveContextAsync" disabled="@(this.SentenceAnalyzer.IsAnalyzing || this.IsDialogOpen)">
                <span class="oi oi-cloud-upload"></span> Save Session
            </button>
            <button class="btn btn-primary mx-1" onclick="@this.OnClearContext" disabled="@(this.SentenceAnalyzer.IsAnalyzing || this.IsDialogOpen)">
                <span class="oi oi-trash"></span> Clear Session
            </button>

            @if (!this.SentenceAnalyzer.IsAnalyzing)
            {
                <button class="btn btn-success mx-1" onclick="@this.StartAnalyzeAll" disabled="@(this.IsDialogOpen)"><span class="oi oi-media-play"></span> Analyze all</button>
                <button class="btn btn-primary mx-1" onclick="@(() => this.SaveTrainingDataAsync(default))" disabled="@(this.PrepareContext.ReviewedSentences == 0 || this.IsDialogOpen)">
                    <span class="oi oi-loop-square"></span> Save (@(this.PrepareContext.ReviewedSentences) accepted)
                </button>
            }
            else
            {
                <button class="btn btn-primary mx-1" disabled>
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    <span class="sr-only">Analyzing ...</span>
                </button>
                <button class="btn btn-secondary mx-1" onclick="@this.SentenceAnalyzer.Cancel" disabled="@this.SentenceAnalyzer.IsCancelled"><span class="oi oi-media-stop"></span> Cancel</button>
            }
        </div>
        <hr/>
    </p>
    @if (this._showCrawledDataSelection)
    {
        <div>
            @if (this._isLoadingCrawledData)
            {
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                <span class="sr-only">Adding crawled data ...</span>
            }
            else
            {
                <div class="alert alert-secondary shadow" role="alert">
                    <div class="list-group">
                        <h4>Available crawled data:</h4>
                        @foreach (var fileName in this.DataProvider.AvailableRelationalData.Order())
                        {
                            <a class="list-group-item list-group-item-action" @onclick="() => this.OnLoadCrawledDataClick(fileName)">@(Path.GetFileName(fileName))</a>
                        }
                    </div>
                </div>
            }
        </div>
    }
    @if (this._showBatchAdding)
    {
        <AddSentenceBatch PrepareContext="@PrepareContext" OnAdded="this.OnAddedBatchSentences" OnCancel="this.OnCancelBatchSentences"></AddSentenceBatch>
    }
    else
    {
        @if (this.PrepareContext.Sentences.Count > 0)
        {
            <div>
                <div class="form-check-inline">
                    <Pager PaginationState="@this._paginationState"/>
                </div>
                <div class="form-check form-check-inline">
                    <span>Show: </span>
                </div>
                <div class="form-check-inline bg-secondary text-light rounded p-1">
                    <InputCheckbox id="showInitial" class="form-check-input bg-secondary" @bind-Value="@this.ShowInitial" />
                    <label class="form-check-label" for="showInitial">Unprocessed</label>
                </div>
                <div class="form-check-inline bg-primary text-light rounded p-1">
                    <InputCheckbox id="showProcessed" class="form-check-input bg-primary" @bind-Value="@this.ShowProcessed" />
                    <label class="form-check-label" for="showProcessed">Analyzed</label>
                </div>
                <div class="form-check-inline bg-success text-light rounded p-1">
                    <InputCheckbox id="showReviewed" class="form-check-input bg-success" @bind-Value="@this.ShowReviewed" />
                    <label class="form-check-label" for="showReviewed">Accepted</label>
                </div>
                <div class="form-check-inline bg-warning text-dark rounded p-1">
                    <InputCheckbox id="showHidden" class="form-check-input bg-warning" @bind-Value="@this.ShowHidden" />
                    <label class="form-check-label" for="showHidden">Hidden</label>
                </div>
            </div>
            <hr />
        }
        @foreach (var sentenceContext in this._paginationState.ItemsOfPage)
        {
            <Sentence Context="@sentenceContext" OnStateChange="this.StateHasChanged" OnDelete="this.OnDeleteSentenceClick"/>
        }

        @if (!this.IsDialogOpen)
        {
            <hr/>
            <p>
                @if (this._paginationState.TotalPageCount > 1)
                {
                    <Pager PaginationState="@this._paginationState" />
                }

                <button class="btn btn-primary mx-1" onclick="@this.AddNewSentence" disabled="@(this.SentenceAnalyzer.IsAnalyzing || this.IsDialogOpen)"><span class="oi oi-plus"></span> Add new sentence</button>
            </p>
        }
    }
</div>
